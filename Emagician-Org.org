* Org Mode Setup

** TODO Todo task states

#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "STARTED(g)" "|" "DONE(d!/!)")
      (sequence "WAITING(w@/!)")))
  
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "cyan" :weight bold)
                ("STARTED" forground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold))))
  
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src


** Habits
   Thanks to this: http://orgmode.org/worg/org-tutorials/tracking-habits.html

#+begin_src emacs-lisp
(require 'org-habit)

;; Shoulda used add-to-list.  Derp.
(setq org-todo-keywords (append org-todo-keywords '((sequence "HABIT(h)" "|" "DONE(d!)"))))
(setq org-todokeyword-faces (append org-todo-keyword-faces '(("HABIT" :forground "cyan" :weight bold))))

#+end_src
*** NEXT switch to add-to-list
** Agenda
*** Org agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/Projects/emagicians-starter-kit"
                           "~/Dropbox/org"))
  
#+end_src
*** Stuck projects

Using Bernt Hansens concept of proejcts and stuck projects.  There is
also quite a number of groovy helper functions

Originally from http://doc.norang.ca/org-mode.html#Projects
#+begin_src emacs-lisp
  (defun emagician-org/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))
  
  (defun emagician-org/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (emagician-org/find-project-task)
        (if (equal (point) task)
            nil
          t))))
  
  (defun emagician-org/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))
  
  (defun emagician-org/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))
  
  (defun emagician-org/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defun emagician-org/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defun emagician-org/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (emagician-org/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (emagician-org/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))
  
  (defun emagician-org/skip-non-projects ()
    "Skip trees that are not projects"
    (emagician-org/list-sublevels-for-projects-indented)
    (if (save-excursion (emagician-org/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (if (emagician-org/is-project-p)
                nil
              subtree-end)))
      (org-end-of-subtree t)))
  
  (defun emagician-org/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((emagician-org/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((emagician-org/is-project-p)
          next-headline)
         ((and (emagician-org/is-task-p) (not (emagician-org/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))
  
  (defun emagician-org/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((emagician-org/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (emagician-org/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (emagician-org/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((emagician-org/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (emagician-org/is-subproject-p)
          nil
        next-headline)))
  
#+end_src


**** TODO Figure out a cool way to add to the agenda
(tags-todo "-CANCELLED/!"
           ((org-agenda-overriding-header "Stuck Projects")
		   (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
**** TODO 

** TODO Capture 

** Org Babel

   Some no-brainer org babel setup.

*** Extra setup

Wherever possible we always want ot display inline images
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'emagician/display-inline-images 'append)
  
  (defun emagician/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))
#+end_src


*** Gnuplot setup

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(setq gnuplot-program "/usr/local/bin/gnuplot")
#+end_src


*** Some standard langauges that should come out of the box
#+begin_src emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
   (emacs-lisp . t)
   (calc . t)
   (gnuplot . t)))
#+end_src

*** Don't confirm on non-destructive languages
#+begin_src emacs-lisp
 (defun my-org-confirm-babel-evaluate (lang body)
            (not (or (string= lang "ditaa")
                     (string= lang "calc"))))

 (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src



** Time clocking
(defun org-dblock-write:rangereport (params)
  "Display day-by-day time reports."
  (let* ((ts (plist-get params :tstart))
         (te (plist-get params :tend))
         (start (time-to-seconds
                 (apply 'encode-time (org-parse-time-string ts))))
         (end (time-to-seconds
               (apply 'encode-time (org-parse-time-string te))))
         day-numbers)
    (setq params (plist-put params :tstart nil))
    (setq params (plist-put params :end nil))
    (while (<= start end)
      (save-excursion
        (insert "\n\n"
                (format-time-string (car org-time-stamp-formats)
                                    (seconds-to-time start))
                "----------------\n")
        (org-dblock-write:clocktable
         (plist-put
          (plist-put
           params
           :tstart
           (format-time-string (car org-time-stamp-formats)
                               (seconds-to-time start)))
          :tend
          (format-time-string (car org-time-stamp-formats)
                              (seconds-to-time end))))
        (setq start (+ 86400 start))))))
