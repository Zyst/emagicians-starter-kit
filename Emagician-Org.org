#+title: Org Mode 
#+begin-src
(require 'org)
#+end_src
* Agenda
** Set up a better agenda

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks t)
#+end_src

*** Main agenda
	- Week at a glance at top
	- Next items in a list, ordered by org file

#+begin_src emacs-lisp :noweb yes
    (global-set-key (kbd "C-c a") 'org-agenda)
    
    (defun emagician-agenda/daily-wisdom (&rest args)
      "Show some daily wisdom in the agenda"
      ;(insert (org-add-props "-|-+-|-"
      ;            nil 'face 'org-agenda-structure) "\n")
      ;(insert (concat (emagician/cookie) "\n" ))
      )
    
    (let ((refile-tasks '(tags "REFILE" 
                               ((org-agenda-overriding-header "Tasks to Refile")
                                (org-tags-match-list-sublevels))))
          (stuck-projects '(tags-todo "-CANCELLED/!"
                                      ((org-agenda-overriding-header "Stuck Projects")
                                       (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                       (org-agenda-todo-ignore-scheduled t)
                                       (org-agenda-todo-ignore-deadlines t)
                                       (org-agenda-todo-ignore-with-date t)
                                       (org-tags-match-list-sublevels t)
                                       (org-agenda-sorting-strategy
                                        '(todo-state-down effort-up category-keep)))))
          (next-tasks '(tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                                   ((org-agenda-overriding-header "Next Actions")
                                    (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                                    (org-agenda-todo-ignore-scheduled t)
                                    (org-agenda-todo-ignore-deadlines t)
                                    (org-agenda-todo-ignore-with-date t)
                                    (org-agenda-sorting-strategy
                                     '(category-down category-keep))))))
      (setq org-agenda-custom-commands
            `((" " "Agenda"
               ((agenda "" nil)
                (emagician-agenda/daily-wisdom 
                 "" 
                 ((org-agenda-overriding-header " -|-+-|-"))) 
                ,next-tasks
                ,refile-tasks
                ,stuck-projects))
              ("y" "Wisdom... YOW!"
               ((agenda "" nil)
                (emagician-agenda/daily-wisdom)))
              ("W" "Weekly Review -- Unfinished."))))
          (global-set-key (kbd "C-c a") 'org-agenda)
        
        (defun emagician-agenda/daily-wisdom (&rest args)
          "Show some daily wisdom in the agenda"
          (message "%s" args)
          (concat (emagician/cookie) "\n" ))
        
        (let ((refile-tasks '(tags "REFILE" 
                                   ((org-agenda-overriding-header "Tasks to Refile")
                                    (org-tags-match-list-sublevels))))
              (stuck-projects '(tags-todo "-CANCELLED/!"
                                          ((org-agenda-overriding-header "Stuck Projects")
                                           (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                           (org-agenda-todo-ignore-scheduled t)
                                           (org-agenda-todo-ignore-deadlines t)
                                           (org-agenda-todo-ignore-with-date t)
                                           (org-tags-match-list-sublevels t)
                                           (org-agenda-sorting-strategy
                                            '(todo-state-down effort-up category-keep)))))
              (next-tasks '(tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                                       ((org-agenda-overriding-header "Next Actions")
                                        (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                                        (org-agenda-todo-ignore-scheduled t)
                                        (org-agenda-todo-ignore-deadlines t)
                                        (org-agenda-todo-ignore-with-date t)
                                        (org-agenda-sorting-strategy
                                         '(category-down category-keep))))))
          (setq org-agenda-custom-commands
                `((" " "Agenda"
                   ((agenda "" nil)
                    (emagician-agenda/daily-wisdom 
                     "" 
                     ((org-agenda-overriding-header " -|-+-|-"))) 
                    ,next-tasks
                    ,refile-tasks
                    ,stuck-projects))
                  ("y" "Wisdom... YOW!"
                   ((agenda "" nil)
                    (emagician-agenda/daily-wisdom)))
                  ("W" "Weekly Review -- Unfinished."))))
        
#+end_src

*** TODO figure out context
**** NEXT set up contexts in a list
**** TODO Add to tags
**** TODO Set up as agenda views, via macro if need be. 

** Org agenda files
*** Load up all the agenda files
#+begin_src emacs-lisp
  (defun emagician/start-agenda-hook ()
    "Hook for showing the agenda on startup"
    (org-agenda 'nil "a"))
  
  (add-hook 'emacs-startup-hook 'emagician/start-agenda-hook)
#+end_src
**** TODO warn user of org-agenda is empty
**** TODO [#A] Fix agenda to load itself after a set idle time. 

** Stuck projects

Using Brent Hansens concept of projects and stuck projects.  There is
also quite a number of groovy helper functions

Originally from http://doc.norang.ca/org-mode.html#Projects
#+begin_src emacs-lisp
  (defun emagician-org/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))
  
  (defun emagician-org/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (emagician-org/find-project-task)
        (if (equal (point) task)
            nil
          t))))
  
  (defun emagician-org/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))
  
  (defun emagician-org/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))
  
  (defun emagician-org/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defun emagician-org/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defun emagician-org/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (emagician-org/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (emagician-org/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))
  
  (defun emagician-org/skip-non-projects ()
    "Skip trees that are not projects"
    (emagician-org/list-sublevels-for-projects-indented)
    (if (save-excursion (emagician-org/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (if (emagician-org/is-project-p)
                nil
              subtree-end)))
      (org-end-of-subtree t)))
  
  (defun emagician-org/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((emagician-org/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((emagician-org/is-project-p)
          next-headline)
         ((and (emagician-org/is-task-p) (not (emagician-org/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))
  
  (defun emagician-org/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((emagician-org/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (emagician-org/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (emagician-org/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((emagician-org/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun emagician-org/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (emagician-org/is-subproject-p)
          nil
        next-headline)))
  
#+end_src


*** TODO Figure out a cool way to add to the agenda
(tags-todo "-CANCELLED/!"
           ((org-agenda-overriding-header "Stuck Projects")
		   (org-agenda-skip-function 'bh/skip-non-stuck-projects)))

** TODO Custom Agenda that shows next tasks
* Todo task states

#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "STARTED(g)" "|" "DONE(d!/!)")
      (sequence "WAITING(w@/!)")))
  
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "cyan" :weight bold)
                ("STARTED" forground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold))))
#+end_src
** Quick task selection 
#+begin_src  
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

*** Specialized set-task-as-next

#+BEGIN_SRC emacs-lisp
  (defun emagician-org/todo-to-next ()
    "sets the todo state of the current headline to next."
    (interactive)
    (org-todo "NEXT")
    (org-set-tags))
  
  (emagician/define-mode-key org-mode "C-c n" emagician-org/todo-to-next)

  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
* Habits
   Thanks to this: http://orgmode.org/worg/org-tutorials/tracking-habits.html

#+begin_src emacs-lisp
(require 'org-habit)

;; Shoulda used add-to-list.  Derp.
(setq org-todo-keywords (append org-todo-keywords '((sequence "HABIT(h)" "|" "DONE(d!)"))))
(setq org-todokeyword-faces (append org-todo-keyword-faces '(("HABIT" :forground "cyan" :weight bold))))

#+end_src
** NEXT switch to add-to-list
* TODO Capture 
  
* Org Babel

  Some no-brainer org babel setup.

** Handling of source in org files

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-fontify-natively t)
#+end_src

** Inline images

Wherever possible we always want ot display inline images
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'emagician/display-inline-images 'append)
  
  (setq org-startup-with-inline-images t)
  
  (defun emagician/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))
#+end_src

** Gnuplot setup

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(setq gnuplot-program "/usr/local/bin/gnuplot")
#+end_src

** Some standard langauges that should come out of the box
#+begin_src emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
   (emacs-lisp . t)
   (calc . t)
   (gnuplot . t)))
#+end_src

** Don't confirm on non-destructive languages
#+begin_src emacs-lisp
 (defun emagician/org-confirm-babel-evaluate (lang body)
            (not (or (string= lang "ditaa")
                     (string= lang "calc"))))

 (setq org-confirm-babel-evaluate 'emagician/org-confirm-babel-evaluate)
#+end_src

** Graphing
*** TODO Plantuml
**** TODO get plantuml jar, throw in distbin or something
**** TODO make sure to add some kind of update code somwerhesrs for bins like this. even if its just a todo 
**** TODO set up  (setq org-plantuml-jar-path "~/Downloads/plantuml.jar")
*** TODO ditaa
  
* TODO Time clocking
(defun org-dblock-write:rangereport (params)
  "Display day-by-day time reports."
  (let* ((ts (plist-get params :tstart))
         (te (plist-get params :tend))
         (start (time-to-seconds
                 (apply 'encode-time (org-parse-time-string ts))))
         (end (time-to-seconds
               (apply 'encode-time (org-parse-time-string te))))
         day-numbers)
    (setq params (plist-put params :tstart nil))
    (setq params (plist-put params :end nil))
    (while (<= start end)
      (save-excursion
        (insert "\n\n"
                (format-time-string (car org-time-stamp-formats)
                                    (seconds-to-time start))
                "----------------\n")
        (org-dblock-write:clocktable
         (plist-put
          (plist-put
           params
           :tstart
           (format-time-string (car org-time-stamp-formats)
                               (seconds-to-time start)))
          :tend
          (format-time-string (car org-time-stamp-formats)
                              (seconds-to-time end))))
        (setq start (+ 86400 start))))))
* Links
#+begin-src emacs-lisp
(require 'org-info)
(define-key global-map "\C-cl" 'org-store-link)
#+end_src
* TODO org-elisp-symbol
* TODO tidy
#+begin_src emacs-lisp :tangle no
    (let ((buf (org-element-parse-buffer))) ;; convert current buffer to ELisp
      (dolist (rule cleanup-rules) ;; run cleanup transformations on the buffer
        (setq buf (funcall rule buf)))
      (delete-region (point-min) (point-max)) ;; replace the buffer contents
      (insert (org-element-interpret-data buf))) ;; with the cleaned results
#+end_src
* Auto-complete
** Set up some custom sources
#+begin_src emacs-lisp :tangle no
  (defvar emagician/ac-candidates-org-properties
    '(("TODO" . "The TODO keyword of the entry.")
      ("TAGS" . "The tags defined directly in the headline.")
      ("ALLTAGS" . "All tags, including inherited ones.")
      ("CATEGORY" . "The category of an entry.")
      ("PRIORITY" . "The priority of the entry, a string with a single letter.")
      ("DEADLINE" . "The deadline time string, without the angular brackets.")
      ("SCHEDULED" . "The scheduling timestamp, without the angular brackets.")
      ("CLOSED" . "When was this entry closed?")
      ("TIMESTAMP" . "The first keyword-less timestamp in the entry.")
      ("TIMESTAMP_IA" . "The first inactive timestamp in the entry.")
      ("CLOCKSUM" . "The sum of CLOCK intervals in the subtree.  `org-clock-sum' must be run first to compute the values in the current buffer.")
      ("BLOCKED" . "`t' if task is currently blocked by children or siblings")
      ("ITEM" . "The content of the entry.")
      ("FILE" . "The filename the entry is located in.")
      ("END" . "End a drawer")))
  
  (defvar ac-source-org-properties
    '((candidates . (mapcar 'car emagician/ac-candidates-org-properties))
      (document   . (mapcar 'cdr emagician/ac-candidates-org-properties))
      (symbol     . prop)))
  
  (defvar emagician/ac-candidates-org-sheplus
    '((("BEGIN_CENTER" . "Center block")
       ("END_CENTER" . "End Center block")
       ("BEGIN_COMMENT" . "Text to not be exported.")
       ("END_COMMENT" . "End comment block.")
       ("BEGIN_DOCBOOK" . "Inserted into docbook export literally")
       ("END_DOCBOOK" . "")
       ("BEGIN_HTML" . "Inserted into html export literally")
       ("HTML" . "single line literal HTML for export")
       ("END_HTML" . "")
       ("BEGIN_LaTeX" . "Inserted into latex export literally")
       ("LaTeX" . "Single line literal Latex for export")
       ("END_LaTeX" . "Inserted into latex export literally")
       ("BEGIN_EXAMPLE" . "Verbatim example")
       ("END_EXAMPLE" . "End Verbatim example")
       ("BEGIN_QUOTE" . "Multi-line quote.")
       ("END_QUOTE" . "End of quote block.")
       ("BEGIN_SRC" . "Source block. ")
       ("END_SRC" . "End of source block")
       ("BEGIN_VERSE" . "keep linebreaks, but maintain formatting")
       ("END_VERSE" . "end of verse block.")
       ("CALL" . "Eval a code block.
  ,#+CALL: name[header args](args) end of header args
  ,#+CALL: double(n=4)
  ,#+CALL: double[:results output](n=4)
  ,#+CALL: double{:results html](n=4) :results html")
       ("CAPTION" . "Image or table caption")
       ("INCLUDE" . "Include a file.  
  ,#+INCLUDE: \"file.org\" :prefix1 \"  + \" :prefix: \" \" str :minlevel 3
  ,#+INCLUDE: \"~/.emacs\" src emacs-lisp
  ,#+INCLUDE: \"somefoo\" quote 
  ,#+INCLUDE: \"somefoo\" example
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"")
       ("INDEX" . "Add entry to index.  #+INDEX: Foo!Bar")
       ("LABEL" . "Internal cross reference, i.e. tbl:some-foo or fig:SED-hR4049")
       ("MACRO" . "#+MACRO: name     replacement text with $1 and $2 as arguments."))))
  
  (defvar emagician/ac-candidates-org-sheplushead
    '(("TITLE" . "Title of the document")
      ("ARCHIVE" . "Archive location.  #+ARCHIVE: %s_foo::")
      ("CATEGORY" . "category for document")
      ("COLUMNS" . "Set column properties, i.e. #+COLUMNS: %25FOo %TAGS %PRIORITY %TODO")
      ("CONSTANTS" . "Set constants.  i.e. #+CONTANTS: pi=3.14, tau=6.28")
      ("DRAWERS" . "List of drawer names.  #+DRAWERS: HIDDEN PROPERTIES STATE")
      ("FILETAGS" . "Tags that this file should inherit")
      ("TAGS" . "#+TAGS: foo(f) bar baz \\n new line of tags")
      ("LINK" . "Link Abbreviation,  #+LINK: foo http://example.com/")
      ("STARTUP" . "Startup options.
  noptag to turn offorg-ta-persistent-alist")
  
      ("OPTIONS" . "Change options, i.e. #+OPTIONS: H:4 toc:nil
  H:org-export-headline-levels
  num: 
  toc:org-export-with-toc
  skip:org-export-skip-text-before-1st-heading
  @:
  ::
  |:
  ^:
  -:
  F:
  todo:
  tasks:
  pri:
  Tags:
  <:
  ,*:
  TeX:
  LaTeX:
  skip:
  author:
  email:
  creator:
  timestamp:
  d:
  "
  )))
  
  (defvar emagician/ac-candidates-org-export-sheplushead
    "AUTHOR"
    "DATE"
    "DESCRIPTION"
    "EMAIL"
    "KEYWORDS"
    "LANGUAGE"
    "TEXT"
    "BIND"
    "LINK_UP"
    "LINK_HOME"
    "LATEX_HEADER"
    "EXPORT_SELECT_TAGS"
    "EXPORT_EXCLUDE_TAGS"
    "XSLT")
  
#+end_src
* TODO do something with this coolness
(defun jonnay-org-remember-loop ()
  "Go to a special place for rapid task entry and refiling"
  (interactive)
  (org-open-link-from-string "file:~/Dropbox/org/GTD.org::* Org-Loop")
  (next-line)
  (let ((heat-death-of-the-universe '()))
	(loop until heat-death-of-the-universe
	      do (org-remember nil ?i))))
