* Base Initialization and Circle Casting
#+BEGIN_SRC emacs-lisp
(defconst emagician/version "0.23.1")
(setq debug-on-error t)
#+END_SRC
  
  This is my emacs.  There are many like it, but this one is mine.

** Breakage Helpers - Make it easy to deal with and figure out why a starter kit won't load.

   Snarfed this idea from https://github.com/overtone/emacs-live.
   Which goes to show: even if you use the word brogrammer you might
   still have good ideas. ðŸ˜¼

#+begin_example
â€‹â€Œà°¡(Â°ç›ŠÂ°)à°¹ ,( Bro, Even if you're swol, it doesn't mean you're a bro, bro. )
#+end_example

   Debug Errors.  

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

*** Super Baseline, Start with the Barest thing that could possibly work
#+BEGIN_SRC emacs-lisp
(setq initial-stratch-message
      (concat ";;; -X-x-X- Invokaction SuperFailure! -X-x-X-" "\n"
              ";;; Problem in Emagician.org when setting up Breakage Helpers"))

#+END_SRC

*** Define Scratch Message Helper Functions

#+BEGIN_SRC emacs-lisp
(defun emagician/set-scratch (&rest lines)
  (setq initial-scratch-message (apply 'concat lines)))

(defun emagician/append-scratch (&rest lines)
  (setq initial-scratch-message (apply 'concat initial-scratch-message lines)))

(defvar emagician/pre-scratch-links '()
  "A list of links to append to emagician/scratch-links.

This is necessary because we may need to communicate to the user
before the rest of the scratch interface is built.")

#+END_SRC
    
*** Now set it to our Baseline beautified "you're-busted" text

#+BEGIN_SRC emacs-lisp
(emagician/set-scratch
  ";; -|-+-|- Invocation Failure.  Sorry. -|-+-|-" "\n"
  ";; You know what to do." "\n"
  ";; \n"
  ";; Emagician Starter kit Version: " emagician/version "\n"
  ";; Emacs: " (number-to-string emacs-major-version) "." (number-to-string emacs-minor-version) " [" (when emacs-repository-version (number-to-string emacs-repository-version)) "]" "\n"
  ";; \n"
  ";;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
  ";;                      ;;" "\n"      
  ";; It's dangerous to go ;;" "\n"
  ";; alone! take this:    ;;" "\n"
  ";;                      ;;" "\n"
  ";;   ðŸ”¥     ðŸ‘·     ðŸ”¥  ;;" "\n"
  ";;          ðŸ”®          ;;" "\n"
  ";;                      ;;" "\n"
  ";;;;;;;;;;;;  ;;;;;;;;;;;;" "\n"
  "\n"
  "(shell-command \"" invocation-directory invocation-name " --debug-init\")\n")
#+END_SRC

** Verify emagician/dir is set 

#+BEGIN_SRC emacs-lisp
(when (null emagician/dir)
  (let ((err (concat "Variable emagician/dir is not set!  This is important and should be set in " user-init-file)))
    (emagician/append-scratch ";;; " err "\n" ";;; Check the file Emagician-Install.org for more details.")
    (error err)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(emagician/append-scratch
  "\n"
  "(find-file-other-window \"" emagician/dir "\")" "\n"
  "(find-file-other-window \"" emagician/dir "/*.org\"  t)" "\n")
#+END_SRC

** Use the new improved emagician scratch.
*** Inhibit the old one
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** Add a show-scratch function 
	This is generally useful anyway.  We could also use initial buffer, but that has a tendency to get overridden by hooks.
#+BEGIN_SRC emacs-lisp
(defun emagician/show-scratch ()
  "Show the scratch buffer"
  (interactive)
  (set-window-buffer nil "*scratch*"))

(add-hook 'emacs-startup-hook 'emagician/show-scratch t)
#+END_SRC

** Package Archives setup
  We set our download dir to local-packages.  We also do the trick of
  doing package-refresh-contents if package-archive-contents is empty.

  We set the archives to the big 3 plus orgmode.  MELPA, ELPA and Org!  Oh My!

  file:./assets/images/sulu-swordfight-oh-my.jpg

#+BEGIN_SRC emacs-lisp
(defvar emagician/are-elpas-reachable? t "Whether or not ELPAs are reachable")

(setq package-user-dir (concat emagician/dir "elpa"))

(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("MELPA"       . "http://melpa.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")))

(package-initialize)

(condition-case err
    (unless package-archive-contents (package-refresh-contents))
  ((error)
   (let ((scratch-msg (concat ";;; !!! Couldn't refresh package contents\n"
                              "((package-refresh-contents)(beginning-of-line)(kill-line))")))
     (message "Could not refresh package contents: %s %S" (car err) (cdr err))
     (emagician/append-scratch scratch-msg)
     (add-to-list 'emagician/pre-scratch-links scratch-msg)
     (setq emagician/are-elpas-reachable? nil))))
#+END_SRC
  
** Load Paths, Custom Files, etc.
*** Standard Emagician distribution load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path emagician/dir)
(add-to-list 'load-path (concat emagician/dir "src"))
(add-to-list 'load-path (concat emagician/dir "dist"))
(add-to-list 'custom-theme-load-path (concat emagician/dir "themes"))
#+END_SRC

*** Custom file shouldn't matter so much anymore, but lets stick it here anyway. 
#+BEGIN_SRC emacs-lisp
(setq custom-file (concat emagician/dir "custom.el"))
#+END_SRC

* Emagician/load

   Originally from Eschulte.  This function takes a <foo>.org file,
   and load it.  

   This doesn't try to load from a tag or a header arg.  That got crufty for my needs.


#+name: starter-kit-load
#+BEGIN_SRC emacs-lisp
(defvar emagician/load-depth 0)
(defvar emagician/slow-loaders '())
(defun emagician/load (file)
  "Load configuration from other .org files."
  (let ((start-time (current-time))
        (file (expand-file-name (if (string-match ".+\.org" file)
                                    file
                                  (format "%s.org" file))
                                emagician/dir))
        (load-result nil)
        (emagician/load-depth (1+ emagician/load-depth))
        (org-babel-default-header-args (cons '(:comment . "link") 
                                             (assq-delete-all :comment
                                                              org-babel-default-header-args))))
    (if (file-exists-p file)
        (progn
          (emagician/append-scratch "\n;; "
                                    (make-string emagician/load-depth ?-)
                                    " Loading " file)
          (setq load-result (org-babel-load-file file)))
      (progn
        (emagician/append-scratch "\n;; "
                                  (make-string emagician/load-depth ?-)
                                  "Skipped Loading "
                                  file
                                  " It doesn't exist!\n")
        (setq load-result nil)))
    (let ((elapsed (float-time (time-subtract (current-time)
                                              start-time))))
      (when (> elapsed 3.2)
        (add-to-list 'emagician/slow-loaders (cons file elapsed)))
      (message (format "Emagician/Loaded %s %.3fs elapsed" 
                       file
                       elapsed)))
    (emagician/append-scratch "...done!" "\n")
    load-result))

#+END_SRC

* Package Management
** Emagician Expect, for bootstrapping
#+BEGIN_SRC emacs-lisp
(defun emagician/expect-package (package)
  "If the named PACKAGE isn't currently installed, install it"
  (unless (package-installed-p package)
    (package-install package)))  
#+END_SRC

** ðŸ˜» Use-Package ðŸ˜»
   https://github.com/jwiegley/use-package

   Is the cat's ass.  Why would you not use it?

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure emagician/are-elpas-reachable?)
(emagician/expect-package 'use-package)
#+END_SRC

* Emagician Starter Kit has it's own Helper Functions
#+BEGIN_SRC emacs-lisp
(emagician/load "Emagician-Base.org")
#+END_SRC

* Assets
  Assets are either 
  
  1. org files that tangle assets into a directory or
  2. files that are distributed with the starter kit. 

  In the case of #1, we want the assets directory to be destroyed and rebuilt everytime. 
  In the case of #2, it should be in source control 

* Interface

  This file handles the baseline interface for emacs, and is split into the following sections:

  - Keystrokes :: Really just a small bit about an anti-vim hack
  - Display :: anything visible, modeline, titlebar, theme, etc
  - Editing :: about inserting and using text, including snippets and autocomplete
  - Navigating :: Moving the mark.  This includes searching.
  - Saving :: All about backups.
  - State Management :: Persist state across emacs sessions.
  - Help and Discoverability :: Getting more help with emacs, and learning commands better. 

#+BEGIN_SRC emacs-lisp
(emagician/load "Interface.org")
#+END_SRC

* Text

  Emacs is a text editor afteral.

#+BEGIN_SRC emacs-lisp 
(emagician/load "Text.org")
#+END_SRC

* Programming

  This sets up some baseline programming helpers and then loads
  individual org files for each programming mode. 

#+BEGIN_SRC emacs-lisp
(emagician/load "Programming.org")
#+END_SRC

* Org Mode
  Deserves it's own file... ORG GRIMOIRE!

#+BEGIN_SRC emacs-lisp
(emagician/load "Org-Grimoire.org")
#+END_SRC

* Shell

  (Also my lovely wife)

  Why would you not use Eshell?

#+BEGIN_SRC emacs-lisp
(emagician/load "Eshell-Magick.org")
#+END_SRC

* Lamp

  The Lamp is a 5th magickal weapon along with the wand, sword, cup
  and chalace.  It represents illumination and self knowledge.

#+BEGIN_SRC emacs-lisp
(emagician/load "Lamp.org")
#+END_SRC
  
* Emagician Starter Kit has it's own Lamp

  Tools to make developing the Emagician Starter kit easier.

#+BEGIN_SRC emacs-lisp
(emagician/load "Emagician-Meta.org")
#+END_SRC
  
* Now load the users files
** First the customization
#+BEGIN_SRC emacs-lisp
(load custom-file)
#+END_SRC

** Next is the true-name-file
#+BEGIN_SRC emacs-lisp
(emagician/load emagician/true-name)
#+END_SRC

** System Type Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load (emagician/sanitize-file-name (symbol-name system-type)))
#+END_SRC

** Machine Name Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load (emagician/sanitize-file-name system-name))
#+END_SRC

** Login name Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load user-login-name)
#+END_SRC
   
* Some Inspirational words from the book of emacs
THE BOOK OF THE EMACS, Part I
Liber Lisper Legis
as (R)eceived (M)ade (S)ound [RMS]
on this 15th day of December,
the Year of our Editor 2007.
Chapter 1

  1. Buf! Manifestation of Chat.
  2. All Gods Seek Her Company.
  3. Intelligent, she watches.
  4. Every act a function, there is no difference.
  5. Help me o RMS, in unveiling thee before the Needy on Earth
  6. Be thou not just my editor, but mine eyes, heart and yes, Soul.
  7. Behold from darkness and byte code interpreter thou groweth strong.
  8. The car is in the cdr, not the cdr in the car.
  9. Worship then the car and behold the Maserati of all programs ever.
  10. Thou powers known to but a few, thou public API widely advertised.
  11. Whilst others seek bells and whistles, thou sweet hum caresseth me.
  12. Open me up, list my buffers, be they ibuffer or buff-menu+
  13. No limit to the ecstasy. I EVAL ALL. `(,ALL ,@I ,EVAL!)
	  
M-x all-hail-emacs

https://groups.google.com/forum/#!topic/alt.religion.emacs/Yej_PTIqekg

* References, Bibliography, Shout Outs, and Props.
  - ESchultes Emacs Starter Kit :: https://github.com/eschulte/emacs-starter-kit
  - Sacha Chu :: http://dl.dropbox.com/u/3968124/sacha-emacs.html
  - Emacs Starter Kit :: https://github.com/technomancy/emacs-starter-kit
  - Cabbage  :: https://github.com/senny/cabbage
  - Emacs Live :: https://github.com/overtone/emacs-live
  - novoid :: https://github.com/novoid/dot-emacs
  - ocodo :: https://github.com/ocodo/emacs.d
  - https://github.com/redguardtoo/emacs.d/blob/master/init-misc.el
  - http://rix.si/blog/2015/01/05/fsem-001/
  - https://www.writequit.org/org/settings.html#sec-1-20
* Thee End
*** Initiate thee scratch
[[file:assets/images/Troll_Scratch.gif]]

#+BEGIN_SRC emacs-lisp
(emagician/initiate-thee-scratch)
#+END_SRC

*** Turn off debugging

  We're Almost Done. 

#+BEGIN_SRC emacs-lisp
(setq debug-on-error nil)
#+END_SRC

*** So Mote it Be.

#+BEGIN_SRC emacs-lisp
(provide 'emagician)
#+END_SRC

