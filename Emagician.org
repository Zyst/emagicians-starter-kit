* Base initialization and Circle Casting

  Look, if you're here, either you're a mutant (horray!), or I have
  done something horribly wrong. (boo!).

  Frankly the defaults here should be good enough that no-one should
  need to change them.  And by good enough I mean, really basic things
  like bog-standard libraries required, package managers set up.
  Things like spaces, tabs, and all the important stuff are in their
  own file.

** Meta Development

   Emagician sets up a few of its own functions for helpful debugging and development of itself

#+begin_src
(defun emagician-reload ()
  "Reload the init file"
  (interactive)
  (org-babel-load-file (expand-file-name "Emagician.org" emagician-dir)))
#+end_src

*** TODO custom agenda for Emagician

** Paths, Startup files, etc.

   Load paths, customizations, etc.
#+begin_src emacs-lisp
(add-to-list 'load-path emagician-dir)
(setq custom-file (concat emagician-dir "custom.el"))
(add-to-list 'load-path (concat emagician-dir "src"))
(add-to-list 'load-path (concat emagician-dir "dist"))
#+end_src

** Ubiquitious Packages

   These need to be not-autoloaded, cause they are EVERYWHERE MAN.

#+begin_src emacs-lisp
    (require 'cl)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
#+end_src

** ELPA 
   Throwing our lot in with MELPA at this point. 
#+begin_src emacs-lisp
  (setq package-user-dir (concat emagician-dir "elpa"))
  
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("melpa"       . "http://melpa.milkbox.net/packages/")))
  
  (package-initialize)
  
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src


   For sake of archival purposes, here are 2 other potential ELPA
   archives.

#+begin_example
            ("original"    . "http://tromey.com/elpa/")
            ("marmalade"   . "http://marmalade-repo.org/packages/")
#+end_example

*** TODO Loading stuff from ELPA automagickally
    http://kieranhealy.org/esk/starter-kit-elpa.html
** Themes
#+begin_src emacs_lisp
(add-to-list 'custom-theme-load-path (concat emagician-dir "themes"))
#+end_src 
** Base initalization function set

   There are a number of baseline things we need to do, like custom loaders, macros for setting up hooks, etc. etc.

*** Starter Kit Load

   Originally from Eschulte.  This function takes a <foo>.org file,
   and load it.  It can also be given the argument of a sub tree, which 
   is defined as either a proper ord id, or a tag. 

   If the subtree is a tag, then all subtrees with that tag are collected and loaded.



#+name: starter-kit-load
#+begin_src emacs-lisp
    (defun emagician-starter-kit-load (file &optional header-or-tag)
      "Load configuration from other .org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.
    
    For example, to load all of lisp.org simply
    add (emagician-starter-kit-load \"lisp\") to your configuration.
    
    To load only the 'window-system' config from
    emagician-starter-kit-misc-recommended.org add
     (emagican-starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match ".+\.org" file)
                                        file
                                      (format "%s.org" file))
                                    emagician-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
#+end_src
**** TODO fix documentation 
*** Load User/System Specific Files
***** System/User specific customizations
You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

You can keep elisp source in the =src= directory.  Packages loaded
from here will override those installed by ELPA.  This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

After we've loaded all the Starter Kit defaults, lets load the User's stuff.
#+name: starter-kit-load-files
#+begin_src emacs-lisp
(when nil
  (flet ((sk-load (base)
           (let* ((path          (expand-file-name base emagician-dir))
                  (literate      (concat path ".org"))
                  (encrypted-org (concat path ".org.gpg"))
                  (plain         (concat path ".el"))
                  (encrypted-el  (concat path ".el.gpg")))
             (cond
              ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
              ((file-exists-p encrypted-el)  (load encrypted-el))
              ((file-exists-p literate)      (org-babel-load-file literate))
              ((file-exists-p plain)         (load plain)))))
         (remove-extension (name)
           (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
           (match-string 1 name)))
    (let ((elisp-dir (expand-file-name "src" emagician-dir))
          (user-dir (expand-file-name user-login-name emagician-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path)))
      ;; load system-specific config
      (sk-load system-name)
      ;; load user-specific config
      (sk-load user-login-name)
      ;; load any files in the user's directory
      (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))))
)
#+end_src


*** Settings from M-x customize
#+name: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

* Starter Kit Core

As with the other starter kit, there are some fundamentals that need
to be delt with. 

** Basic hook functions
   This macro will help build your turn-on-minor-mode functions that are so helpful, and automagickally add them to a major mode.  It won't try to re-define the turn-on mode if it is already defined.

#+begin_src emacs-lisp
      (defmacro emagician-minor-in-major-mode (major-mode minor-mode)
        (let ((turn-on-symbol (intern (concat "turn-on-" (symbol-name minor-mode)))))
          (list
           'progn 
           (when (not (fboundp turn-on-symbol))
             `(defun ,turn-on-symbol ()
                "Automagickally generated by emagicians starter kit."
                (,minor-mode +1)))
           `(add-hook ,major-mode ,minor-mode))))
    
    (ert-deftest emagician-test-minor-in-major-mode ()
      "emagician-minor-in-major macro test"
      (should (equal (macroexpand '(emagician-minor-in-major-mode elisp-mode paredit-mode))
                     '(progn (defun turn-on-paredit-mode "Automagickally generated by emagicians starter kit." (paredit-mode +1))
                             (add-hook elisp-mode paredit-mode)))))
    
#+end_src


** DONE Required Package handling

   Instead of having to front-load packages like paredit, slime, etc.   why can't they be auto-installed as needed?  That's what this does.

   This is so that required packages can be properly loaclized.
#+begin_src emacs-lisp
  (defun emagician-expect-package (package)
    "If the named PACKAGE isn't currently installed, install it"
    (unless (package-installed-p package)
      (package-install package)))  
#+end_src

*** TODO make it check an internet connection before installing

* Development Core
  
  Ok, if you're an emagician, you're a developer of some kind or
  another.  You may "just" be working in eslip, or you might be a
  ployglot proficient in Low-level C, Scheme, Ruby and Rails, and
  Java. Either way, you're a dev.
** Key Definition Hooks

   Bit of a crappy definition here, but it's something.  This can be probably better handled.

#+begin_src emacs-lisp
  (defmacro emagician/define-mode-key (mode-name key command)
    (let ((define-key-fname (make-symbol (concat (symbol-name mode-name)
                                                 "-key-["
                                                 (replace-regexp-in-string "\s"
                                                                           "_"
                                                                           key)
                                                 "]-"
                                                 (symbol-name command)
                                                 "-hook"))))
    `(progn
      (defun ,define-key-fname ()
        "Automatically generated hook function"
        (define-key ,(make-symbol (concat (symbol-name mode-name) "-map")) ,key ,command))
      (add-to-hook ,(make-symbol (concat (symbol-name mode-name) "-hook")) 
                   ,define-key-fname))))
(when nil
(let ((mode-name 'org-mode)
      (key "C-x C-SPC ")
      (command 'foo))
(make-symbol (concat (symbol-name mode-name)
                                                 "-key-["
                                                 (replace-regexp-in-string "\s"
                                                                           "_"
                                                                           key)
                                                 "]-"
                                                 (symbol-name command)
                                                 "-hook"))
)
)
#+end_src
*** TODO Figure out if this needs to be optimized
*** TODO make a new definition to build a custom command

** TODO Programming modes

#+begin_src emacs-lisp
  (defvar programming-modes '() 
    "A list of modes that are development related, and should all behave the same.")
  
  (defvar programming-mode-hooks '() 
    "A list of hooks to run in every programming mode")
  
  (defun run-programming-mode-hooks ()
    "helper function to execute programming mode hooks."
    (run-hooks 'programming-mode-hooks))    
#+end_src

*** TODO add to "programming-modes" list.  
*** TODO Fix definition in the yank under editing
*** TODO add standard hooks into it 
	- [ ] auto-pair mode
** CEDET

   I don't have enough mojo to work with cedet yet.  Working on it.  

#+name: load-cedet
#+begin_src emacs-lisp
  (setq semantic-default-submodes 
        (append semantic-default-submodes
                '(global-semantic-idle-summary-mode
                  global-semantic-idle-completions-mode
                  global-semantic-idle-scheduler-mode
                  global-semantic-decoration-mode
                  global-semantic-hilight-func-mode
                  global-semantic-stickyfuc-mode)))
  
  ;; Enable Semantic
  (semantic-mode 1)
  
#+end_src

** Basic Coding Hooks
*** TODO needs to be snarfed and barfed from the emacs starter kit
** WhichFunc
#+begin_src emacs-lisp
(which-function-mode t)
#+end_src
*** TODO add magic to it.  maybe look at programming modes
** Flymake Setup
#+begin-src emacs-lisp
(emagician-expect-package 'flymake-cursor)
#+end_src
* Load Users Customizations
** TODO fix this teporary shit here
#+begin_src emacs-lisp
(emagician-starter-kit-load (concat emagician-dir "Emagician-Jonnay"))
#+end_src
** System Type Initialization

** Login name Initialization

** Machine Name Initialization

** Person Initialization
* References, Bibliography, Shout Outs, and Props.
  - Sacha Chu :: http://dl.dropbox.com/u/3968124/sacha-emacs.html
