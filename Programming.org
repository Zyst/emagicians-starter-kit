#+title:General Programming helpers

* Editing
** Tabs
No Physical tabs. 

#+begin_src emacs-lisp 
  (setq-default indent-tabs-mode nil)
#+end_src

** Spell Checking on Programming Modes

#+begin_src emacs-lisp 
(emagician/minor-in-major-mode flyspell-prog-mode prog-mode)
#+end_src

** Yanking
#+begin_src emacs-lisp
  (defadvice yank (after indent-region activate)
    "indent the region after a yank if we're in a programming mode."
    (if (derived-mode-p 'prog-mode)
        (indent-region (region-beginning) (region-end) nil)))
#+end_src
** YAS  
#+begin_src emacs-lisp 
(add-hook 'prog-mode-hook 'yas-minor-mode-on)
#+end_src

** Smart Paren Mode
#+begin_src emacs-lisp 
(use-package smartparens
  :defer t
  :diminish "⒮"
  :bind (("M-9" . sp-backward-sexp)
         ("M-0" . sp-forward-sexp))
  :init
  (add-hook 'prog-mode-hook #'turn-on-smartparens-mode)
  :config
  (add-to-list 'sp-sexp-suffix '(json-mode regex ""))
  (add-to-list 'sp-sexp-suffix '(es-mode regex ""))

  (require 'smartparens-config)
  (add-hook 'sh-mode-hook
            (lambda ()
              ;; Remove when https://github.com/Fuco1/smartparens/issues/257
              ;; is fixed
              (setq sp-autoescape-string-quote nil)))

    ;; Remove the M-<backspace> binding that smartparens adds

  (let ((disabled '("M-<backspace>")))
    (setq sp-smartparens-bindings
          (cl-remove-if (lambda (key-command)
                          (member (car key-command) disabled))
                        sp-smartparens-bindings)))

  (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
  (define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
  (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
  (define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)
    ;(define-key sp-keymap (kbd "M-(") 'sp-forward-barf-sexp)
    ;(define-key sp-keymap (kbd "M-)") 'sp-forward-slurp-sexp)

  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
  (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
  (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
  (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)
  (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)

  (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
  (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)
    ;; (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
    ;; (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

  (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
  (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)
  (define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
  (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
  (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
  (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)
  (define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
  (define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)
  (define-key sp-keymap (kbd "H-t") 'sp-prefix-tag-object)
  (define-key sp-keymap (kbd "H-p") 'sp-prefix-pair-object)
  (define-key sp-keymap (kbd "H-s c") 'sp-convolute-sexp)
  (define-key sp-keymap (kbd "H-s a") 'sp-absorb-sexp)
  (define-key sp-keymap (kbd "H-s e") 'sp-emit-sexp)
  (define-key sp-keymap (kbd "H-s p") 'sp-add-to-previous-sexp)
  (define-key sp-keymap (kbd "H-s n") 'sp-add-to-next-sexp)
  (define-key sp-keymap (kbd "H-s j") 'sp-join-sexp)
  (define-key sp-keymap (kbd "H-s s") 'sp-split-sexp)

  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
    ;; Remove '' pairing in elisp because quoting is used a ton
)

#+end_src

* Interface elements
** Line Numbers
#+begin_src emacs-lisp 
(add-hook 'prog-mode-hook 'linum-mode)
#+end_src

** Which Function
#+begin_src emacs-lisp 
(which-function-mode t)
#+end_src

** Check Parens

#+begin_src emacs-lisp
  (defun emagician/check-parens ()
    (condition-case err
        (check-parens)
      ((error) (message "Buffer has unmatched Parens or quote!"))))

#+end_src

#+begin_src emacs-lisp
(add-hook 'find-file-hook 'emagician/check-parens t)
#+end_src
** Show Paren Mode
#+begin_src emacs-lisp 
(setq show-paren-style 'expression)
(setq show-paren-delay 0)
(show-paren-mode)
#+end_src
** Rainbow Delimiters 
#+begin_src emacs-lisp 
(use-package rainbow-delimiters
  :demand
  :init
  (emagician/minor-in-major-mode rainbow-delimiters-mode prog-mode))
#+end_src

** Color Identifiers
#+begin_src emacs-lisp 
(use-package color-identifiers-mode
  :init
  (add-hook 'after-init-hook 'global-color-identifiers-mode))

#+end_src

** Show whitespace

   Whitespace unicode does good stuff with whitespace.  Use that.

#+begin_src emacs-lisp 
(use-package whitespace
  :init
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (use-package unicode-whitespace
    :config
    (unicode-whitespace-setup 'subdued-faces)))
#+end_src

** Prettify Symbols

#+begin_src emacs-lisp 
(global-prettify-symbols-mode 1)
#+end_src

*** Prettify Symbols List

Thanks to Artur Malabarba [fn:3], Inspired by:  https://github.com/tonsky/FiraCode. 

#+begin_src emacs-lisp :tangle no
(defvar emagician/prettify-list
  '(("lambda" . 955)
    ("<=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≤))
    (">=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≥))
    ("->" . ?⟶)
    ("=>" . ?⟹)
    ("//" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?⫽))
    ("!=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≠))
    ("->>" .  (?\s (Br . Bl) ?\s (Br . Bl) ?\s
                   (Bl . Bl) ?- (Bc . Br) ?- (Bc . Bc) ?>
                   (Bc . Bl) ?- (Br . Br) ?>))))

(emagician/defhook emagician-prettify-code prog-mode-hook
  (setq prettify-symbols-alist emagician/prettify-list))
#+end_src

| You enter | Displayed |
|-----------+-----------|
| ~lambda~  | λ         |
|-----------+-----------|
| ~<=~      | ≤         |
| ~>=~      | ≥         |
| ~->~      | ⟶         |
| ~=>~      | ⟹         |
| ~//~      | ⫽         |
| ~!=~      | ≠         |

Using http://unicode-table.com/ helped a LOT

**** How does this jiggery-pokery work?
Prettify is basically a call to compose region, it automagickally sets
start and end, and the second arg of the a-list is ~components~

So for ~("lambda" . 955)~, "lambda" just gets turned into char 955, or λ.

But for ~("<=" . (?\s (Br . Bl) ?\s (Bc . Bc) ?≥))~?
 
#+begin_quote
If it is a vector or list, it is a sequence of alternate characters and
composition rules, where (2N)th elements are characters and (2N+1)th
elements are composition rules to specify how to compose (2N+2)th
elements with previously composed N glyphs.

A composition rule is a cons of global and new glyph reference point
symbols.  See the documentation of  [[help:reference-point-alist]] for more
details.
#+end_quote

Rrrriiiiggghhhhht.  

I don't entirely understand this yet. 

* Tools
** Flycheck

#+begin_src emacs-lisp 
  (use-package flycheck
    :diminish "🐛 "
    :init
    (global-flycheck-mode)
    (emagician/minor-in-major-mode flycheck-color-mode-line-mode prog-mode))
#+end_src

** DZ, make it easy to run secondary services
#+begin_src emacs-lisp
(use-package dizzee)
#+end_src

** Org Source... babel babel babel!
   I use org babel a lot. (duh).

   It's nice to have helpers to see if we are in org-babel mode.

#+begin_src emacs-lisp 
  (defun emagician/org-src-mode-p () 
    "Test to see wehther the current mode is in org-src mode"
    (member 'org-src-mode minor-mode-list))

  (ert-deftest emagician/org-src-mode-p ()
    (let ((minor-mode-list '()))
      (should-not (emagician/org-src-mode-p)))
    (let ((minor-mode-list '(foo bar)))
      (should-not (emagician/org-src-mode-p)))
    (let ((minor-mode-list '(org-src-mode)))
      (should (emagician/org-src-mode-p))))
#+end_src

** Jenkins
#+begin_src emacs-lisp 
(use-package jenkins) 
#+end_src

* Version control

  Version control Gets it's own section. 

   Don't manage ancient version control backends 
#+begin_src emacs-lisp 
(setq vc-handled-backends '(Git))
#+end_src

** Editing
   
   Modes for editing git-specific files 

#+begin_src emacs-lisp 
  (use-package git-commit)
  (use-package gitconfig-mode)
  (use-package gitignore-mode)
#+end_src

** Interface 
*** Magit
#+begin_src emacs-lisp 
(use-package magit
  :init
  (when (locate-file "git-achievements" exec-path)
    (setq magit-git-executable "git-achievements"))
  :bind 
  ("C-c m" . magit-status)
  :config)
#+end_src

**** Interact with github 

#+begin_src emacs-lisp 
  (use-package magit-gh-pulls
    :init
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+end_src

**** Add a function for automagickally setting the config
#+begin_src emacs-lisp 
(defun emagician/set-github-gh-pull-config (user repo)
  "Set the proper config for gh-pulls."
  (interactive "sUser/Org: \nsRepo: ")
  (magit-git-command-topdir (format "config magit.gh-pulls-repo %s/%s" user repo)
                            (magit-toplevel)))
#+end_src


*** Git Gutter

#+begin_src emacs-lisp 
(use-package git-gutter-fringe+
  :init
  (setq git-gutter-fr+-side 'right-fringe))
#+end_src

* Languages
  Each language gets it's own file.

#+begin_src emacs-lisp 
(emagician/load "Programming-Lisp")
(emagician/load "Programming-Ruby")
(emagician/load "Programming-Web")
(emagician/load "Programming-Sh")
#+end_src
  
* Quazi-related Modes
** Yaml
#+begin_src emacs-lisp 
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src


[fn:3] http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html
