#+title:General Programming helpers

* Editing
** Tabs
No Physical tabs. 

#+begin_src emacs-lisp 
  (setq-default indent-tabs-mode nil)
#+end_src

** Spell Checking on Programming Modes

#+begin_src emacs-lisp 
(emagician/minor-in-major-mode prog-mode flyspell-prog-mode)
#+end_src

** Yanking
#+begin_src emacs-lisp
  (defadvice yank (after indent-region activate)
    "indent the region after a yank if we're in a programming mode."
    (if (derived-mode-p 'prog-mode)
        (indent-region (region-beginning) (region-end) nil)))
#+end_src
* Interface elements
** Line Numbers
#+begin_src emacs-lisp 
(add-hook 'prog-mode-hook 'linum-mode)
#+end_src

** Show Paren Mode
#+begin_src emacs-lisp 
(setq show-paren-style 'mixed)
(setq show-paren-delay 0)
(show-paren-mode)
#+end_src

** Which Function
#+begin_src emacs-lisp 
(which-function-mode t)
#+end_src

** YAS  
#+begin_src emacs-lisp 
(add-hook 'prog-mode-hook 'yas-minor-mode-on)
#+end_src

** TODO Smart Paren Mode
#+begin_src emacs-lisp :tangle no

  (use-package smartparens
    :defer t
    :diminish "")
#+end_src

** Check Parens
#+begin_src emacs-lisp
(add-hook 'find-file-hook 'check-parens t)
#+end_src
* Tools
** Flycheck

#+begin_src emacs-lisp 
  (use-package flycheck
    :init
    (global-flycheck-mode)
    (emagician/minor-in-major-mode prog-mode flycheck-color-mode-line-mode))
#+end_src

** DZ, make it easy to run secondary services
#+begin_src emacs-lisp
(use-package dizzee)
#+end_src

** Org Source... babel babel babel!
   I use org babel a lot. (duh).

   It's nice to have helpers to see if we are in org-babel mode.

#+begin_src emacs-lisp 
  (defun emagician/org-src-mode-p () 
    "Test to see wehther the current mode is in org-src mode"
    (member 'org-src-mode minor-mode-list))

  (ert-deftest emagician/org-src-mode-p ()
    (let ((minor-mode-list '()))
      (should-not (emagician/org-src-mode-p)))
    (let ((minor-mode-list '(foo bar)))
      (should-not (emagician/org-src-mode-p)))
    (let ((minor-mode-list '(org-src-mode)))
      (should (emagician/org-src-mode-p))))
#+end_src

* Version control

  Version control Gets it's own section. 

   Don't manage ancient version control backends 
#+begin_src emacs-lisp 
(setq vc-handled-backends '(Git))
#+end_src

** Editing
   
   Modes for editing git-specific files 

#+begin_src emacs-lisp 
  (use-package git-commit)
  (use-package gitconfig-mode)
  (use-package gitignore-mode)
#+end_src

** Interface 
*** Magit
#+begin_src emacs-lisp 
(use-package magit
  :init
  (when (locate-file "git-achievements" exec-path)
    (setq magit-git-executable "git-achievements"))
  :bind 
  ("C-c m" . magit-status)
  :config
  (use-package magit-gh-pulls
    :init
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)))
#+end_src

*** Git Gutter

#+begin_src emacs-lisp 
(use-package git-gutter-fringe+
  :init
  (setq git-gutter-fr+-side 'right-fringe))
#+end_src


* Languages
  Each language gets it's own file.

#+begin_src emacs-lisp 
(emagician/load "Programming-Lisp")
(emagician/load "Programming-Ruby")
(emagician/load "Programming-Web")
#+end_src
  
* Quazi-related Modes
** Yaml
#+begin_src emacs-lisp 
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src
