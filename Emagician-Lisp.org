* General lisp setup
** Paredit
   
   If you aren't using paredit, do whatever it takes to learnhow to
   use paredit. 

   Start here: http://emacswiki.org/emacs/ParEdit

#+begin_src emacs-lisp
(emagician-expect-package 'paredit)
(require 'paredit)
(defun turn-on-paredit ()
  (paredit-mode +1))
#+end_src
   
   
** TODO Show params 
   

** Slime
#+begin_src emacs-lisp
(emagician-expect-package 'slime)
(require 'slime)
(slime-setup)
#+end_src


* Elisp

  Elisp is by far the most important Lisp setup.  This needs to be
  done well, and done right.  If you have *any* suggestions on how to
  make the elisp setup even better, let me know!

** Evaluation and printing

Set up some defaults for print level.  Note that we assume that depth mistakes are made, but not length.


#+begin_src emacs-lisp
  (setq eval-expression-print-length 9000
        print-length nil
        eval-expression-print-level 20
        print-level 900)
#+end_src

** Formatting

#+begin_src
(require 'elisp-format)
#+end_src

** Set up hooks 

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'starter-kit-remove-elc-on-save)
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'turn-on-paredit)
#+end_src

** Auto-complete magic

** Integration with emacs itself

#+begin_src emacs-lisp
(defun starter-kit-remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (make-local-variable 'after-save-hook)
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))))
#+end_src

** Header Magick
*** header2.el for managing emacs wiki files

* Common Lisp

* Scheme

* Clojure
