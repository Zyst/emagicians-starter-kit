* Shell Mode
** Set the path environment variable
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "HOME") "/bin:"
                       "/usr/local/bin:"
                       (getenv "PATH")))

(add-to-list 'exec-path "/usr/local/bin")
#+end_src
** Ansi Color On shells
  Ansi color in shell mode is good.

#+name: ansi-color
#+begin_src emacs-lisp
  (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  
#+end_src

** Set up pcomplete and auto complete on shell
   
   Thanks http://blog.supermomonga.com/!  

   There should be a Japanese/English emacs exhange program.

#+begin_src emacs-lisp
  (defun set-up-auto-complete-for-shell-mode ()
    (setq ac-sources
          '(ac-source-pcomplete
            ac-source-words-in-buffer
            ac-source-dictionary
            )))

(add-hook 'shell-mode-hook 'set-up-auto-complete-for-shell-mode)  
#+end_src

*** Git pcompletion in the shell. 
	(From Mikey in Mastering emacs: http://www.masteringemacs.org/articles/2012/01/16/pcomplete-context-sensitive-completion-emacs/)

	Do check out that link to understand how pcomplete works.

#+begin_src emacs-lisp 
(defconst pcmpl-git-commands
  '("add" "bisect" "branch" "checkout" "clone"
    "commit" "diff" "fetch" "flow" "grep"         ; What no git flow?  MADNESS!
    "init" "log" "merge" "mv" "pull" "push" "rebase"
    "reset" "rm" "show" "status" "tag" )
  "List of `git' commands")
 
(defvar pcmpl-git-ref-list-cmd "git for-each-ref refs/ --format='%(refname)'"
  "The `git' command to run to get a list of refs")
 
(defun pcmpl-git-get-refs (type)
  "Return a list of `git' refs filtered by TYPE"
  (with-temp-buffer
    (insert (shell-command-to-string pcmpl-git-ref-list-cmd))
    (goto-char (point-min))
    (let ((ref-list))
      (while (re-search-forward (concat "^refs/" type "/\\(.+\\)$") nil t)
        (add-to-list 'ref-list (match-string 1)))
      ref-list)))
 
(defun pcomplete/git ()
  "Completion for `git'"
  ;; Completion for the command argument.
  (pcomplete-here* pcmpl-git-commands)  
  ;; complete files/dirs forever if the command is `add' or `rm'
  (cond
   ((pcomplete-match (regexp-opt '("add" "rm")) 1)
    (while (pcomplete-here (pcomplete-entries))))
   ;; provide branch completion for the command `checkout'.
   ((pcomplete-match "checkout" 1)
    (pcomplete-here* (pcmpl-git-get-refs "heads")))))
#+end_src

** Run a shell immediately in emacs so it is available

#+name: shell-on-startup
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'shell)
#+end_src

* Git

#+begin_src emacs-lisp

  (emagician-expect-package 'magit)
  (emagician-expect-package 'git-commit-mode)
  (emagician-expect-package 'gitconfig-mode)
  (emagician-expect-package 'gitignore-mode)

  (global-set-key (kbd "C-c m") 'magit-status)
  
  (when (locate-file "git-achievements" exec-path)
    (setq magit-git-executable "git-achievements"))
#+end_src
** NEXT Set up git help with info using emacs. 
* Edit with emacs
#+begin_src emacs-lisp
  (when (require 'edit-server nil t)
    (edit-server-start))
#+end_src
  
* Emacs server
#+begin_src emacs-lisp
(server-start)
#+end_src

* Info diectory
** Set up Var
#+begin_src emacs-lisp 
;(add-to-list 'Info-additional-directory-list (expand-file-name "dist/info" emagician-dir))
#+end_src

** Dir writing and tangling

*** Head of the thing
#+begin_src texinfo :tangle dist/info/dir :noweb yes :padline no 
  This is the file .../info/dir, which contains the
  topmost node of the Info hierarchy, called (dir)Top.
  The first time you invoke Info you start off looking at this node.
  ^_
  File: dir,      Node: Top

  Emagician Info Directory
  ************************

    The info files here are distributed under various open licenses.  
  
    Please be sure to check the individual licenses for each software
    package.
  
   * Menu:
  
  <<info-dir-autogenerated>>
  
  ---- User's `dir' ends here ----
#+end_src

*** Code to emit info-dir-files

#+begin_src emacs-lisp :tangle no :results value wrap  
  (apply 'concat 
         "#+name: info-dir-autogenerated\n"
         "#+begin_src texinfo :tangle no\n" 
         "  This listing was autogenerated on: " (current-time-string) "\n"
         "  -----------------------------------------------------------\n\n"
         (append (mapcar '(lambda (f) 
                            (cond ((string= f "dir")
                                   "")
                                  ((string= (substring f 0 1) ".")
                                   "")
                                  (t
                                   (concat "  * " f "(" f ")          Docco!\n") )))
                         (directory-files (expand-file-name "dist/info" emagician-dir)))
                 '("#+end_src" "\n")))
#+end_src

#+RESULTS:
:RESULTS:
#+name: info-dir-autogenerated
#+begin_src texinfo :tangle no
  This listing was autogenerated on: Thu Oct 11 00:27:30 2012
  -----------------------------------------------------------

  * git.info(git.info)          Docco!
  * gitman.info(gitman.info)          Docco!
  * r5rs.info(r5rs.info)          Docco!
#+end_src
:END:

* ERC + Bitlbee - IM with emacs. 

#+begin-src emacs-lisp
  (eval-after-load "erc"
    '(progn
       (add-to-list 'erc-modules 'log)
	   (add-to-list 'erc-modules 'autoaway)
	   (add-to-list 'erc-modules 'page)
	   (add-to-list 'erc-modules 'spelling) 
       
       (erc-update-modules)))
  
  (setq erc-log-channels-directory (concat "~/Dropbox/Documents/im/" system-name))
  (setq erc-save-buffer-on-part t
        erc-log-write-after-send t
        erc-log-write-after-insert t)
  
  (setq erc-hide-list '("MODE"))
#+end_src


#+begin_src emacs-lisp
  (emagician-expect-package 'bitlbee)
     
  (setq bitlbee-user-directory "/usr/local/etc/bitlbee")
  (setq bitlbee-executable "/usr/local/sbin/bitlbee")
  
  (defun emagician-hook/bitlbee-run-if-needed ()
    "Runs bitlbee if required."
    (require 'bitlbee)
    (bitlbee-start))
#+end_src

* Processes through dizzee

  I don't have a great example of htis yet.. but maybe soon.  This package is the shit though.

#+begin_src emacs-lisp
(emagician-expect-package 'dizzee)
#+end_src
