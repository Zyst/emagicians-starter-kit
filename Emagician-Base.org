#+title: Emagician-Base

* Bassline / Baseline

  A baseline set of functions that are helpers for the rest of the Emagician Starter Kit.

  - Basic helpers in case there is a problem loading
  - Extend emacs lisp evaluation environment 
  - emagick-üê∞ functions to furhter extend emacs lisp 
  - Emagician helpers to make configuration much easier.

* Basic helpers
  Just enough to make editing in a broken environment not a pain,

#+begin_src emacs-lisp 
  (require 'ffap)  ; Will be superceeded, but important when stuff gets broke.
#+end_src

* Emacs Lisp Evaluation Environment

There are helpers funcitons and variables that just make working with Emacs Lisp that much nicer.
** Prefer new files
#+begin_src emacs-lisp 
(setq load-prefer-newer t)
#+end_src

** Lexical Evaluation
#+begin_src emacs-lisp 
  (defmacro lexically (&rest forms)
    "Lexically execute forms"
    `(eval '(progn ,@forms) t))
#+end_src

#+begin_src emacs-lisp 
(ert-deftest lexially () 
  (should (equal (macroexpand '(lexically t t t)) '(eval (quote (progn t t t)) t)))) 
#+end_src

** Common Lisp

Sometimes the depricated CL environment is still required.  One day
this can go away. That day isn't today.

#+begin_src emacs-lisp 
  (require 'cl)
#+end_src

** Evaluation and Printing

#+begin_src emacs-lisp
  (setq eval-expression-print-length 9000
        print-length 90000
        eval-expression-print-level 20
        print-level 900)
#+end_src

** Anaphoric Goodness
#+begin_src emacs-lisp 
(use-package anaphora)
#+end_src

** Asyc

   Run commands asyncronously. 

#+begin_src emacs-lisp 
(use-package async)
#+end_src

** Testing
   ERT for testing.  Of course.

   El-mock is too damn rubylike.  

   Fakir is cool ass, but I don't need it.  yet.  Also, a great name

#+begin_src emacs-lisp 
(use-package noflet)
#+end_src

* emagick-üê∞ Extensions to Emacs Lisp
** Test suite
#+begin_src emacs-lisp 
(defun emagician/meta/run-all-emagick-tests ()
  "Run all tests for emagick-üê∞" 
  (interactive)
  (ert-run-tests-interactively "emagick"))
#+end_src

** alist-set: Change element in list
#+begin_src emacs-lisp 
(defun emagick-üê∞/alist-set (key value alist &optional use-proper-list)
  "Sets or adds KEY with VALUE on ALIST, and return the list.
If USE-PROPER-LIST is true then instead of a (dotted . list) a
(proper list) is constructed insted."
  (let ((list-frag (funcall (if use-proper-list #'list #'cons)
                            key
                            value)))
    (if (not (null alist))
        (cons list-frag
              (assq-delete-all key alist))
      (list list-frag))))

(ert-deftest emagick-üê∞/alist-set-on-empty-list ()
  ""
  (should (equal (emagick-üê∞/alist-set 'foo 'bar '())
                 '((foo . bar))))
  (should (equal (emagick-üê∞/alist-set 'foo 'bar '() t)
                 '((foo bar)))))

(ert-deftest emagick-üê∞/alist-set-on-list-with-element ()
  ""
  (should (equal (emagick-üê∞/alist-set 'baz 'blarg '((foo . bar)))
                 '((baz . blarg)(foo . bar))))
  (should (equal (emagick-üê∞/alist-set 'baz 'blarg '((foo bar)) t)
                 '((baz blarg)(foo bar)))))

(ert-deftest emagick-üê∞/alist-set-on-list-without-element ()
  ""
  (should (equal (emagick-üê∞/alist-set 'foo 'bar '((foo . baz)))
                 '((foo . bar))))
  (should (equal (emagick-üê∞/alist-set 'foo 'bar '((foo baz)) t)
                 '((foo bar)))))
#+end_src

* Emagician Helpers
** Backtrace Magick
HOLY SHIT. This worked better than I expected. 

This function snarfs the backtrace when called and returns it as a list.   This is used primarily for initialization testing.

(load-file-name or buffer-file-name)

#+begin_src emacs-lisp 
  (defun emagician/snarf-backtrace ()
    "Snarfs the backtrace as a list"
    (let ((num 3)
          (frames (cons (backtrace-frame 3) nil)))
      (while (car frames)
        (when (> num 50) (error "Too many frames %S" (pp frames)))
        (setq num (1+ num))
        (setq frames (cons (backtrace-frame (+ 3 num)) frames)))
      (cdr frames)))

  (ert-deftest emagician/snarf-backtrace ()
    (should (equal '(t emagician/snarf-backtrace) (car (last (emagician/snarf-backtrace))))))
#+end_src
  
** Sanitize File name

A bit of a naive version of this for now.

#+begin_src emacs-lisp 
(defun emagician/sanitize-file-name (str)
  (replace-regexp-in-string "[/~\000]" "-" str))

#+end_src

#+begin_src emacs-lisp 
  (ert-deftest emagician/sanitize-file-name ()
    (should (equal "" (emagician/sanitize-file-name "")))
    (should (equal "foo" (emagician/sanitize-file-name "foo")))
    (should (equal "-foo" (emagician/sanitize-file-name "/foo")))
    (should (equal "-foo" (emagician/sanitize-file-name "~foo"))))
#+end_src

** Expect Dir

  Make sure a dirs exist.

#+begin_src emacs-lisp
  (defun emagician/expect-dir (dir) 
    "Ensures that the named directory exists."
    (let ((path (expand-file-name dir emagician/dir)))
      (when (not (file-directory-p path))
        (when (file-exists-p path)
          (error "Cannot Create %s, it already exists and is a file." path))
        (make-directory path nil))
      path))
  
#+end_src

#+begin_src emacs-lisp
  (ert-deftest emagician/expect-dir ()
    (let ((tdir "emagician-expect-dir-dummy-test-dir"))   
      (should (not (file-directory-p tdir)))
      (should (file-directory-p (emagician/expect-dir "emagician-expect-dir-dummy-test-dir")))
      (should (file-directory-p (emagician/expect-dir "emagician-expect-dir-dummy-test-dir")))
      (should (progn (delete-directory tdir) (not (file-directory-p tdir))))
      (should-error (emagician/expect-dir "foo/bar/baz/notexisting")))
    (should-error (emagician/expect-dir "Emagician.org")))
#+end_src
  
** Def hook

#+begin_src emacs-lisp
  (defmacro emagician/defhook (name hook &rest b)
    (declare (indent 2))
    (let* ((docp (stringp (car b)))
           (body (if docp (cdr b) b)))
      `(progn 
         (defun ,name () 
           ,(concat (if docp (car b) "Not Documented\n") "\nEmagically defined with emagician/defhook.")
           ,@body)
         (add-hook (quote ,hook) (quote ,name)))))
#+end_src

** Minor In Major

  Kinda one of those things that I am surprised is not a thing.

#+begin_src emacs-lisp
  (defmacro emagician/minor-in-major-mode (minor-mode major-mode)
    (let ((turn-on-symbol (intern (concat "turn-on-" (symbol-name minor-mode)))))
      (list
       'progn 
       (when (not (fboundp turn-on-symbol))
         `(defun ,turn-on-symbol ()
            "Automagickally generated by emagicians starter kit."
            (,minor-mode +1)))
       `(add-hook (quote ,major-mode) (quote ,turn-on-symbol)))))

(ert-deftest emagician/test-minor-in-major-mode ()
  "emagician-minor-in-major macro test"
  (should (equal (macroexpand '(emagician/minor-in-major-mode paredit-mode elisp-mode))
                 '(progn (defun turn-on-paredit-mode () "Automagickally generated by emagicians starter kit." (paredit-mode +1))
                         (add-hook 'elisp-mode 'turn-on-paredit-mode)))))
#+end_src

** Add to Path
#+begin_src emacs-lisp
    (defun emagician/add-to-path (path &rest front)
      "Adds PATH to the PATH env variable, eshell-path-env as well as exec-path.
  If FRONT is non nil, then PATH will be prepended to the env and shell vars.  
  The exec-path always will always have it prepended. "
      (let ((shell-path (concat 
                         (if front 
                             path
                           (getenv "PATH"))
                         ":"
                         (if front
                             (getenv "PATH")
                           path))))
        (setenv "PATH" shell-path)
        (setq eshell-path-env shell-path)
        (setq exec-path (cons path exec-path))))
    
#+end_src

** Final Emagician Scratch

When the starter it is loaded we want to display the scratch buffer
with a new and improved scratch buffer giving some statistics, showing
inspirational messages, dire warnings, and apocalyptic screeds.

We also show a set of quick elisp commands that can be immediately run
by moving the point to the relevant line of elisp, and executing. 

This exemplifies everything that is good with Emacs. 

If you want to add items, you can do so through the
~emagician/scratch-links~ variable.

#+begin_src emacs-lisp 
  (defvar emagician/scratch-links `((magit-status ,emagician/dir))
    "A list of elisp that is inserted in the scratch buffer at startup.")
#+end_src

**** Scratchify
#+begin_src emacs-lisp 
  (defun emagician/scratchify-text (text)
    "Takes a chunk of text, and at the newline boundary inserts ;;;"
    (mapconcat (lambda (line)
                 (format ";;; %s\n" line))
               (split-string text "\n")
               ""))
#+end_src

#+begin_src emacs-lisp 
  (ert-deftest emagician/scratchify-text ()
    (should (equal ";;; foo\n" (emagician/scratchify-text "foo")))
    (should (equal ";;; Topes\n;;; \n" (emagician/scratchify-text "Topes\n"))))
#+end_src
**** Main Scratch Function

#+begin_src emacs-lisp 
(defun emagician/initiate-thee-scratch ()
  (emagician/set-scratch 
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
   ";;;           üê∞-|-+-|- Sekrut Alien Technology -|-+-|-üê∞           ;;;" "\n"
   ";;;                  Hail Eris.  All Hail Discordia.                 ;;;" "\n"
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
   ";;;\n"
   ";;; It is with thee Quill of Echinda" "\n"
   ";;; that I scratch all upon the Beat Mesa" "\n"
   ";;;" " \n" 
   ";;; Emacs Vesrion: " emacs-version "\n" 
   ";;; Emagician Starter kit Version: " emagician/version "\n"
   ";;;" "\n"
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
   (if before-init-time
       (format ";;; Your startup took approximately %.2f seconds" 
               (- (float-time)
                  (float-time before-init-time)))
     (format ";;; One of the start time variables was nil. (current:%s before:%s)"
             (float-time) before-init-time)) "\n" 
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
   ";;; -|-+-|- Chaotic Wisdom -|-+-|-" "\n"
   ";;;" "\n"
   (emagician/scratchify-text (emagician/cookie-from-file "assets/collected-works-ov-chaos.lines"))
   ";;;" "\n"
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
   ";;; -|-+-|- Minor Lamp Invocation -|-+-|-" "\n"
   (emagician/scratchify-text (emagician/cookie-from-file "assets/minor-lamp-invocation.lines"))
   ";;;" "\n"
   ";;; Tools For Magicks" "\n"
   (mapconcat (lambda (link)
                (format "%S\n" link))
              emagician/scratch-links
              "")
   ";;;" "\n"
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"))
#+end_src

