#+title: Emagician-Base

A baseline set of functions that are helpers for the rest of the Emagician Starter Kit

* Basic helpers
  Just enough to make editing in a broken environment not a pain,

#+begin_src emacs-lisp 
  (require 'ffap)  ; Will be superceeded, but important when stuff gets broke.
#+end_src


* Emacs Lisp Evaluation Environment

There are helpers funcitons and variables that just make working with Emacs Lisp that much nicer.

** Lexical Evaluation
#+begin_src emacs-lisp 
  (defmacro lexically (&rest forms)
    "Lexically execute forms"
    `(eval '(progn ,@forms) t))
#+end_src

#+begin_src emacs-lisp 
(ert-deftest lexially () 
  (should (equal (macroexpand '(lexically t t t)) '(eval (quote (progn t t t)) t)))) 
#+end_src

** Common Lisp

Sometimes the depricated CL environment is still required.  One day
this can go away. That day isn't today.

#+begin_src emacs-lisp 
  (require 'cl)
#+end_src


** Evaluation and Printing

#+begin_src emacs-lisp
  (setq eval-expression-print-length 9000
        print-length 90000
        eval-expression-print-level 20
        print-level 900)
#+end_src

** Asyc

   Run commands asyncronously. 

#+begin_src emacs-lisp 
(use-package async)
#+end_src

* Emagician Helpers
** Backtrace Magick
HOLY SHIT. This worked better than I expected. 

This function snarfs the backtrace when called and returns it as a list.   This is used primarily for initialization testing.

(load-file-name or buffer-file-name)

#+begin_src emacs-lisp 
  (defun emagician/snarf-backtrace ()
    "Snarfs the backtrace as a list"
    (let ((num 3)
          (frames (cons (backtrace-frame 3) nil)))
      (while (car frames)
        (when (> num 50) (error "Too many frames %S" (pp frames)))
        (setq num (1+ num))
        (setq frames (cons (backtrace-frame (+ 3 num)) frames)))
      (cdr frames)))

  (ert-deftest emagician/snarf-backtrace ()
    (should (equal '(t emagician/snarf-backtrace) (car (last (emagician/snarf-backtrace))))))
#+end_src
  
** Sanitize File name

A bit of a naive version of this for now.

#+begin_src emacs-lisp 
(defun emagician/sanitize-file-name (str)
  (replace-regexp-in-string "[/~\000]" "-" str))

#+end_src

#+begin_src emacs-lisp 
  (ert-deftest emagician/sanitize-file-name ()
    (should (equal "" (emagician/sanitize-file-name "")))
    (should (equal "foo" (emagician/sanitize-file-name "foo")))
    (should (equal "-foo" (emagician/sanitize-file-name "/foo")))
    (should (equal "-foo" (emagician/sanitize-file-name "~foo"))))
#+end_src

** Expect Dir

  Make sure a dirs exist.

#+begin_src emacs-lisp
  (defun emagician/expect-dir (dir) 
    "Ensures that the named directory exists."
    (let ((path (expand-file-name dir emagician/dir)))
      (when (not (file-directory-p path))
        (when (file-exists-p path)
          (error "Cannot Create %s, it already exists and is a file." path))
        (make-directory path nil))
      path))
  
#+end_src

#+begin_src emacs-lisp
  (ert-deftest emagician/expect-dir ()
    (let ((tdir "emagician-expect-dir-dummy-test-dir"))   
      (should (not (file-directory-p tdir)))
      (should (file-directory-p (emagician/expect-dir "emagician-expect-dir-dummy-test-dir")))
      (should (file-directory-p (emagician/expect-dir "emagician-expect-dir-dummy-test-dir")))
      (should (progn (delete-directory tdir) (not (file-directory-p tdir))))
      (should-error (emagician/expect-dir "foo/bar/baz/notexisting")))
    (should-error (emagician/expect-dir "Emagician.org")))
#+end_src
  
** Minor In Major

  Kinda one of those things that I am surprised is not a thing.

#+begin_src emacs-lisp
      (defmacro emagician/minor-in-major-mode (major-mode minor-mode)
        (let ((turn-on-symbol (intern (concat "turn-on-" (symbol-name minor-mode)))))
          (list
           'progn 
           (when (not (fboundp turn-on-symbol))
             `(defun ,turn-on-symbol ()
                "Automagickally generated by emagicians starter kit."
                (,minor-mode +1)))
           `(add-hook (quote ,major-mode) (quote ,turn-on-symbol)))))
    
    (ert-deftest emagician/test-minor-in-major-mode ()
      "emagician-minor-in-major macro test"
      (should (equal (macroexpand '(emagician/minor-in-major-mode elisp-mode paredit-mode))
                     '(progn (defun turn-on-paredit-mode nil "Automagickally generated by emagicians starter kit." (paredit-mode +1))
                             (add-hook elisp-mode paredit-mode)))))
    
#+end_src

** Final Emagician Scratch

When the starter it is loaded we want to display the scratch buffer
with a new and improved scratch buffer giving some statistics, showing
inspirational messages, dire warnings, and apocalyptic screeds.

We also show a set of quick elisp commands that can be immediately run
by moving the point to the relevant line of elisp, and executing. 

This exemplifies everything that is good with Emacs. 

If you want to add items, you can do so through the
~emagician/scratch-links~ variable.

#+begin_src emacs-lisp 
  (defvar emagician/scratch-links `((magit-status ,emagician/dir))
    "A list of elisp that is inserted in the scratch buffer at startup.")
#+end_src

**** Scratchify
#+begin_src emacs-lisp 
  (defun emagician/scratchify-text (text)
    "Takes a chunk of text, and at the newline boundary inserts ;;;"
    (mapconcat (lambda (line)
                 (format ";;; %s\n" line))
               (split-string text "\n")
               ""))
#+end_src

#+begin_src emacs-lisp 
  (ert-deftest emagician/scratchify-text ()
    (should (equal ";;; foo\n" (emagician/scratchify-text "foo")))
    (should (equal ";;; Topes\n;;; \n" (emagician/scratchify-text "Topes\n"))))
#+end_src
**** Main Scratch Function

#+begin_src emacs-lisp 
  (defun emagician/initiate-thee-scratch ()
    (emagician/set-scratch 
     ";;; üêá-|-+-|- Sekrut Alien Technology -|-+-|-üêá" "\n"
     ";;; Hail Eris.  All Hail Discordia." "\n"
     ";;;\n"
     ";;; It is with thee Quill of Echinda" "\n"
     ";;; that I scratch all upon the Beat Mesa" "\n"
     ";;;" " \n" 
     ";;; Emacs Vesrion: " emacs-version "\n" 
     ";;; Emagician Starter kit Version: " emagician/version "\n"
     ";;; " "\n"
     (if (and after-init-time before-init-time)
         (format ";;; Your startup took approximately %.2f seconds" 
                 (- (float-time after-init-time)
                    (float-time before-init-time)))
       (format ";;; One of the start time variables was nil. (after:%s before:%s) "
               after-init-time before)) "\n" 
     ";;; -|-+-|- Minor Lamp Invocation -|-+-|-" "\n"
     ";;;" "\n"
     (emagician/scratchify-text (emagician/cookie-from-file "assets/collected-works-ov-chaos.lines"))
     ";;;" "\n"
     (emagician/scratchify-text (emagician/cookie-from-file "assets/minor-lamp-invocation.lines"))
     ";;; Tools For Magicks" "\n"
     (mapconcat (lambda (link)
                  (format "%S\n" link))
                emagician/scratch-links
                "")
     ";;;" "\n"))
#+end_src
